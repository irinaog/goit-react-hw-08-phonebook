{"version":3,"file":"static/js/797.751dd7f8.chunk.js","mappings":"4MACA,EAAiC,uCAAjC,EAAyF,uCAAzF,EAA4I,kCAA5I,EAAuL,+B,UCG1KA,EAAkB,WAC7B,IAAMC,GAAWC,EAAAA,EAAAA,MAWjB,OACU,+BACA,kBAAOC,UAAaC,EAAoBC,SAX3B,SAAAC,GACnBA,EAAEC,iBACF,IAAMC,EAAOF,EAAEG,cAAcC,SAASF,KAAKG,MACrCC,EAASN,EAAEG,cAAcC,SAASE,OAAOD,MAC/CV,GAASY,EAAAA,EAAAA,IAAc,CAAEL,KAAAA,EAAMI,OAAAA,KAC/BN,EAAEG,cAAcK,SAMV,WACF,mBAAOX,UAAWC,EAAlB,kBAEE,kBACAD,UAAWC,EACTW,KAAK,OACLP,KAAK,OACLQ,QAAQ,yHACRC,MAAM,yIACJC,UAAQ,QAGb,mBAAOf,UAAWC,EAAlB,oBAEC,kBACAD,UAAWC,EACPW,KAAK,MACLP,KAAK,SACLQ,QAAQ,yFACRC,MAAM,+FACNC,UAAQ,QAId,mBAASf,UAAYC,EAAYW,KAAK,SAAtC,+BCzCV,EAAkC,wCAAlC,EAAwF,oCAAxF,EAA0I,oCCK7HI,EAAiB,WAE1B,IAAMlB,GAAWC,EAAAA,EAAAA,MAEjB,OAAQ,+BACJ,iBAAKC,UAAWC,EAAhB,WACA,kBAAOgB,QAAQ,SAASjB,UAAWC,EAAnC,sCACA,kBACQiB,GAAG,SACHlB,UAAWC,EACXW,KAAK,OACLP,KAAK,SACLc,SAAU,SAAChB,GAAD,OAAOL,GAASsB,EAAAA,EAAAA,IAAcjB,EAAEkB,OAAOb,iBCjBjE,EAA8B,qCAA9B,EAAiF,qCAAjF,EAAkI,mCCKrHc,EAAmB,SAAC,GAA0B,IAAxBjB,EAAuB,EAAvBA,KAAMI,EAAiB,EAAjBA,OAAQS,EAAS,EAATA,GAEvCpB,GAAWC,EAAAA,EAAAA,MACjB,OAEI,gBAAIC,UAAWC,EAAf,WACI,eAAGD,UAAWC,EAAd,UAAgCI,EAAhC,IAAuCI,EAAvC,QACA,mBAAQT,UAAWC,EAAesB,QAAS,kBAAMzB,GAAS0B,EAAAA,EAAAA,IAAcN,KAAxE,sBAFiCA,ICV7C,EAA8B,kCCQjBO,EAAe,WAGxB,IAAMC,GAAWC,EAAAA,EAAAA,KAAY,SAAAC,GAAK,OAAIA,EAAMF,SAASG,SAC/CC,GAASH,EAAAA,EAAAA,KAAY,SAAAC,GAAK,OAAIA,EAAMF,SAASI,UAQnD,OAEI,eAAI9B,UAAWC,EAAf,SACiB,KAAX6B,EACIJ,EAASK,OAAO,GAAKL,EAASM,KAAI,gBAAG3B,EAAH,EAAGA,KAAMI,EAAT,EAASA,OAAQS,EAAjB,EAAiBA,GAAjB,OACpC,SAACI,EAAD,CAA2BjB,KAAMA,EAAMI,OAAQA,EAAQS,GAAIA,GAApCA,MAVxBQ,EAASI,QAAO,SAAAG,GAAO,OAAEA,EAAQ5B,KAAK6B,cAAcC,SAASL,EAAOI,kBAc/CF,KAAI,gBAAG3B,EAAH,EAAGA,KAAMa,EAAT,EAASA,GAAIT,EAAb,EAAaA,OAAb,OACpB,SAACa,EAAD,CAA2BjB,KAAMA,EAAMI,OAAQA,EAAQS,GAAIA,GAApCA,S,UCnB5B,SAASkB,IACtB,IAAMtC,GAAWC,EAAAA,EAAAA,MACX2B,GAAWC,EAAAA,EAAAA,KAAY,SAAAC,GAAK,OAAIA,EAAMF,SAASG,SAiBnD,OAdFQ,EAAAA,EAAAA,YAAU,WAERvC,GAASwC,EAAAA,EAAAA,SACR,CAACxC,KAYE,iCACA,eAAIE,UAAU,cAAd,wBACA,SAACH,EAAD,IACC6B,GAAYA,EAASK,OAAO,IAC3B,iCACA,SAACf,EAAD,KACA,eAAIhB,UAAU,mBAAd,uBAEF,SAACyB,EAAD","sources":["webpack://react-homework-template/./src/components/FormAddContacts/FormAddContact.module.css?cefb","components/FormAddContacts/FormAddContacts.js","webpack://react-homework-template/./src/components/FilterContacts/FilterContacts.module.css?4cf4","components/FilterContacts/FilterContacts.js","webpack://react-homework-template/./src/components/ContactsListItem/ContactListItem.module.css?f9ba","components/ContactsListItem/ContactListItem.js","webpack://react-homework-template/./src/components/ContactsList/ContactsList.module.css?d8e9","components/ContactsList/ContactList.js","page/PhoneBookPage.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"formAddContact\":\"FormAddContact_formAddContact__4d1HJ\",\"formInputTitle\":\"FormAddContact_formInputTitle__9Mmcs\",\"formInput\":\"FormAddContact_formInput__I7NaS\",\"addBtn\":\"FormAddContact_addBtn__ldeTC\"};","import { addNewContact } from 'contacts/contactsOperations';\nimport { useDispatch } from 'react-redux';\nimport css from './FormAddContact.module.css';\n\nexport const FormAddContacts = () => {\n  const dispatch = useDispatch();\n  \n    const hendleSubmit = e => {\n      e.preventDefault();\n      const name = e.currentTarget.elements.name.value;\n      const number = e.currentTarget.elements.number.value;\n      dispatch(addNewContact({ name, number }));\n      e.currentTarget.reset();\n      \n    };\n    \n  return (\n            <>\n            <form  className = {css.formAddContact} onSubmit={hendleSubmit}> \n          <label className={css.formInputTitle}>\n            Name \n            <input\n            className={css.formInput}\n              type=\"text\"\n              name=\"name\"\n              pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n              title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n                required  \n                  />\n          </label>\n           <label className={css.formInputTitle}>\n            Number\n            <input\n            className={css.formInput}\n                type=\"tel\"\n                name=\"number\"\n                pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n                title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n                required\n            />\n          </label>\n          \n          <button  className ={css.addBtn} type=\"submit\">Add contact</button>\n        </form></>\n        )\n    \n};\n\n","// extracted by mini-css-extract-plugin\nexport default {\"filterContainer\":\"FilterContacts_filterContainer__6ilEc\",\"filterTitle\":\"FilterContacts_filterTitle__Hyyp0\",\"filterInput\":\"FilterContacts_filterInput__y+xQQ\"};","import css from './FilterContacts.module.css';\nimport { useDispatch, } from 'react-redux';\nimport { filterContact } from 'contacts/contactsOperations';\n// import { filter } from 'contacts/phoneBookActions';\n\n\nexport const FilterContacts = () => {\n   \n    const dispatch = useDispatch();\n\n    return (<>\n        <div className={css.filterContainer}>\n        <label htmlFor='filter' className={css.filterTitle}> Find contacts by name </label>\n        <input\n                id='filter'\n                className={css.filterInput}\n                type=\"text\"\n                name=\"filter\"\n                onChange={(e) => dispatch(filterContact(e.target.value))}\n            ></input>\n        </div>\n    </>\n    )\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"contactItem\":\"ContactListItem_contactItem__2K-XM\",\"contactName\":\"ContactListItem_contactName__ZnfjO\",\"deleteBtn\":\"ContactListItem_deleteBtn__-GhD1\"};","import PropTypes from 'prop-types';\nimport css from './ContactListItem.module.css'\n\nimport { useDispatch, } from 'react-redux';\nimport { deleteContact } from 'contacts/contactsOperations';\n\nexport const ContactsListItem = ({ name, number, id }) => {\n    \n    const dispatch = useDispatch();\n    return (\n    \n        <li className={css.contactItem} key={id}>\n            <p className={css.contactName}>{name} {number} </p>\n            <button className={css.deleteBtn} onClick={() => dispatch(deleteContact(id))}>Delete</button>\n        </li>\n    )\n};\n\nContactsListItem.propTypes = {\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n    id: PropTypes.string.isRequired,\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"contactList\":\"ContactsList_contactList__qIIH9\"};","// import authSelectors from \"auth/auth-selectors\";\nimport { ContactsListItem } from \"components/ContactsListItem/ContactListItem\";\n// import { filter } from \"contacts/phoneBookActions\";\n// import { getContacts } from \"contacts/contactsOperations\";\nimport { useSelector } from \"react-redux\";\nimport css from './ContactsList.module.css';\n\n// import PropTypes from 'prop-types';\n\nexport const ContactsList = () => {\n    \n    // const dispatch = useDispatch();\n    const contacts = useSelector(state => state.contacts.items);\n    const filter = useSelector(state => state.contacts.filter);\n\n    const getFilterContacts = () => {\n        return contacts.filter(contact=>contact.name.toLowerCase().includes(filter.toLowerCase()))\n    }\n\n \n\n    return (\n        \n        <ul className={css.contactList}>\n             {filter === '' ? \n                  contacts.length>0 && contacts.map(({ name, number, id }) => (\n                <ContactsListItem key={id} name={name} number={number} id={id} />\n            )) \n             : \n            \n                getFilterContacts().map(({ name, id, number }) =>\n                    <ContactsListItem key={id} name={name} number={number} id={id} />\n                )\n            } \n        \n        </ul>\n    )\n};\n\n// ContactsList.propTupes = {\n//     contacts: PropTypes.arrayOf(PropTypes.shape({\n//         name: PropTypes.string.isRequired,\n//         phone: PropTypes.string.isRequired,\n//         id:PropTypes.string.isRequired,}\n//     ))\n// }\n","import { FormAddContacts } from \"components/FormAddContacts/FormAddContacts\";\nimport { FilterContacts } from \"components/FilterContacts/FilterContacts\";\nimport { ContactsList } from \"components/ContactsList/ContactList\";\nimport { getContacts } from \"contacts/contactsOperations\";\nimport { useDispatch, useSelector  } from \"react-redux\";\nimport { useEffect } from \"react\";\n\n// import { useFetchContactsQuery, useAddContactMutation } from 'contacts/contactsSlice';\n// import { useState } from \"react\";\n\n\n\nexport default function PhoneBookPage() {\n  const dispatch = useDispatch();\n  const contacts = useSelector(state => state.contacts.items);\n  // const isFetchingCurrentUser = useSelector(authSelectors.getFetchUser)\n\n  useEffect(() => {\n    // console.log('getcontact')\n    dispatch(getContacts())\n  }, [dispatch]);\n  \n  \n  // const formSubmitHandler = (newData) => {\n  //   if (data && data.find(contact => (newData.name === contact.name))){\n  //     alert(newData.name + ' is already in contacts' )\n  //   }\n  //   else {\n  //     addContact({name:newData.name,  phone:newData.phone})\n  //   }\n  // };\n    return (\n        <>\n        <h1 className=\"headlineApp\">Phonebook</h1>\n        <FormAddContacts  />\n        {contacts && contacts.length>0 &&\n          <>\n          <FilterContacts/>\n          <h2 className=\"contactListTitle\">Contacts</h2>\n          {/* {isFetchingCurrentUser&&} */}\n        <ContactsList  />\n        </>\n            }\n        </>\n    )\n};"],"names":["FormAddContacts","dispatch","useDispatch","className","css","onSubmit","e","preventDefault","name","currentTarget","elements","value","number","addNewContact","reset","type","pattern","title","required","FilterContacts","htmlFor","id","onChange","filterContact","target","ContactsListItem","onClick","deleteContact","ContactsList","contacts","useSelector","state","items","filter","length","map","contact","toLowerCase","includes","PhoneBookPage","useEffect","getContacts"],"sourceRoot":""}